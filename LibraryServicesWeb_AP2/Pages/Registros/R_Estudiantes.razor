@page "/Estudiantes"
@page "/Estudiantes/{EstudianteId:int}"

@using Models
@using Blazored.Toast.Services
@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BLL
<style>
    body {
        background-color: dimgrey;
    }
</style>


<EditForm Model="estudiante" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    @if (AuthenticationStateProvider.GetAuthenticationStateAsync()
.Result.User.Identity.IsAuthenticated)
    {
        <a href="ContRegistros" class="btn btn-warning justify-content-lg-start">Menu Principal</a>
        <div class="card bg-dark text-white">
            <div class="card-header">
                <h3>Registro de Estudiantes</h3>
            </div>
            <div class="card-body">
                <form>

                    @*EstudianteId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>EstudianteId</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="estudiante.EstudianteId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Nombres*@
                    <div class="form-group">
                        <label>Nombres</label>
                        <InputText @bind-Value="estudiante.Nombres" class="form-control" />
                        <ValidationMessage For="@(() => estudiante.Nombres)" />
                    </div>

                    @*Apellidos*@
                    <div class="form-group">
                        <label>Apellido</label>
                        <InputText @bind-Value="estudiante.Apellidos" class="form-control" />
                        <ValidationMessage For="@(() => estudiante.Apellidos)" />
                    </div>

                    @*Matricula*@
                    <div class="form-group">
                        <label>Matricula</label>
                        <InputText @bind-Value="estudiante.Matricula" class="form-control" />
                        <ValidationMessage For="@(() => estudiante.Matricula)" />
                    </div>



                    @*Celular*@
                    <div class="form-group">
                        <label>Celular</label>
                        <input type="tel" @bind="estudiante.Celular" class="form-control" placeholder="000-000-0000" />
                        <ValidationMessage For="@(() => estudiante.Celular)" />
                    </div>



                    @*Direccion*@
                    <div class="form-group">
                        <label>Direccion</label>
                        <InputText @bind-Value="estudiante.Direccion" class="form-control" />
                        <ValidationMessage For="@(() => estudiante.Direccion)" />
                    </div>

                    @*Email*@
                    <div class="form-group">
                        <label>Email</label>
                        <InputText @bind-Value="estudiante.Email" class="form-control" />
                        <ValidationMessage For="@(() => estudiante.Email)" />
                    </div>



                    @*FechaInsercion*@
                    <div class="form-group">
                        <label>Fecha Insercion</label>
                        <InputDate @bind-Value="estudiante.FechaInsercion" class="form-control" />
                        <ValidationMessage For="@(() => estudiante.FechaInsercion)" />
                    </div>



                </form>
            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><span class="oi oi-plus"></span> Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success"><span class="oi oi-circle-check"></span> Guardar</button>

                    @if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
                    {
                        <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><span class="oi oi-delete"></span> Eliminar</button>

                    }

                </div>
            </div>
        </div>
    }
    else
    {
        <h1>No esta registrado</h1>
        <a href="Usuarios" class="btn btn-primary">Ir al Registro</a>
    }

</EditForm>


@code {

    [Parameter]
    public int EstudianteId { get; set; }

    private Estudiante estudiante = new Estudiante();

    protected override void OnInitialized()
    {

        Nuevo();

        Buscar(); 
    }

    public void Nuevo()
    {
        estudiante = new Estudiante();
    }


    private void Buscar()
    {
        if (estudiante.EstudianteId > 0)
        {
            var encontrado = EstudiantesBLL.Buscar(estudiante.EstudianteId);

            if (encontrado != null)
                this.estudiante = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    public void Guardar()
    {
        bool guardo;


        guardo = EstudiantesBLL.Guardar(estudiante);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = EstudiantesBLL.Eliminar(estudiante.EstudianteId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
    public bool ExisteMatricula()
    {
        bool paso = false;
        var Listado = new List<Estudiante>();

        Listado = EstudiantesBLL.GetList(p => p.Matricula == estudiante.Matricula);

        if (Listado.Count == 1)
        {
            if (estudiante.EstudianteId == 0)
                return paso = true;

            Estudiante MatriculaTemporal = new Estudiante();
            MatriculaTemporal = Listado[0];
            if (MatriculaTemporal.EstudianteId != estudiante.EstudianteId)
            {
                paso = true;
            }
        }
        else if (Listado.Count > 1)
        {
            paso = true;
        }

        return paso;
    }


}
