@page "/Prestamos"
@page "/Prestamos/{PrestamoId:int}"
@using LibraryServicesWeb_AP2.Models
@using LibraryServicesWeb_AP2.BLL
@using LibraryServicesWeb_AP2.DAL
@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider
<style>
    body {
        background-color: dimgrey;
    }
</style>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync()
.Result.User.Identity.IsAuthenticated)
{

<EditForm Model="prestamos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <a href="ContRegistros" class="btn btn-warning justify-content-lg-start">Menu Principal</a>
    <div class="card bg-dark text-white">
        <div class="card-header">
            <h3>Registro de Prestamos</h3>
        </div>
        <div class="card-body">
            <form>
                @*PrestamoId*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>PrestamoId</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="prestamos.PrestamoId" class="form-control col-4" />
                                <ValidationMessage For="@(() => prestamos.PrestamoId)" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*Estudiante*@
                <div class="form-group">
                    <label>Estudiante</label>
                    <div class="form-group">
                        <select class="form-control" @bind="prestamos.EstudianteId" @onclick="CargarEtudent">
                            <option value="" disabled selected>Seleccione un Estudiante</option>
                            @foreach (var item in CargarBoxEstudetn())
                            {
                                <option value="@item.EstudianteId">@item.Matricula </option>
                            }
                        </select>
                    </div>
                    <ValidationMessage For="@(()=>prestamos.EstudianteId)" />
                </div>

                

                @*Detalle*@
                <div class="form-row">
                    <div class="form-group col">
                        <label>Tirulo Libro</label>
                        <select class="form-control" @bind="libroSeleccionado" @onclick="Cargarlibro">
                            <option value="" disabled selected>Seleccione un libro</option>
                            @foreach (var item in CargarBoxlibros())
                            {
                                if (item.Disponibilidad == true)
                                {
                                    <option value="@item.LibroId">@item.NombreLibro</option>
                                }




                            }
                        </select>

                        <ValidationMessage For="@(()=>PrestamosDetalle.LibroId)" />
                    </div>

                    @*FechaPrestamo*@
                    <div class="form-group col">
                        <label>Fecha de Prestamos</label>
                        <InputDate @bind-Value="prestamos.FechaPrestamo" class="form-control" />
                        <ValidationMessage For="@(() => prestamos.FechaPrestamo)" />
                    </div>

                    @*FechaPrestamo*@
                    <div class="form-group col">
                        <label>Fecha de Devolucion</label>
                        <div class="input-group">
                            <InputDate @bind-Value="prestamos.FechaDevolucion" class="form-control" />
                            <ValidationMessage For="@(() => prestamos.FechaDevolucion)" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" @onclick="AgregarDetalle">
                                    <i class="oi oi-plus" aria-hidden="true" /> Agregar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                @*TablaDetalle*@
                <table class="table">
                    <thead class="thead-light ">
                        <tr>
                            <th scope="col">DetalleId</th>
                            <th scope="col">PrestamoId</th>
                            <th scope="col">Estudiante</th>
                            <th scope="col">Libro Id</th>
                            <th scope="col">Titulo Libro</th>
                            <th scope="col">Fecha de Prestamo</th>
                            <th scope="col">Fecha de Devolucion</th>


                        </tr>
                    </thead>
                    <tbody class=text-white>
                        @foreach (var item in prestamos.PrestamosDetalles)
                        {
                            <tr>
                                <td>@item.DetalleId</td>
                                <td>@item.PrestamoId</td>
                                <td>@item.EstudianteId </td>
                                <td>@item.LibroId</td>
                                <td>@item.TituloLibro</td>
                                <td>@prestamos.FechaPrestamo</td>
                                <td>@prestamos.FechaDevolucion</td>
                                <td>
                                    <button type="button" class="btn btn-danger" @onclick="@(() => EliminarDetalle(item))">
                                        <span class="oi oi-x"></span>
                                    </button>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>


            </form>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>

</EditForm>
}
else
{
    <h1>No esta registrado</h1>
    <a href="Usuarios" class="btn btn-primary">Ir al Registro</a>
}


@code {

    [Parameter]
    public int PrestamoId { get; set; }
    Prestamo prestamos = new Prestamo();
    PrestamosDetalle PrestamosDetalle = new PrestamosDetalle();
    Libro libro = new Libro();
    Estudiante estudiante = new Estudiante();
    Contexto contexto = new Contexto();


    private string libroSeleccionado = "0";
    private string estudianteSeleccionado = "0";


    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        Cargarlibro();
        CargarEtudent();
        if (PrestamoId != 0)
        {

            prestamos.PrestamoId = PrestamoId;
            Buscar();
        }
    }
    private void Buscar()
    {
        if (prestamos.PrestamoId > 0)
        {
            var encontrado = PrestamosBLL.Buscar(prestamos.PrestamoId);

            if (encontrado != null)
                this.prestamos = encontrado;
            else
                toast.ShowError("No encontrado");
        }
    }

    public void Nuevo()
    {
        prestamos = new Prestamo();
    }

    private void AgregarDetalle()

    {
        estudianteSeleccionado = Convert.ToString(prestamos.EstudianteId);
        if (libroSeleccionado!="0" && estudianteSeleccionado!="0")
        {
            prestamos.PrestamosDetalles.Add(new PrestamosDetalle
            {
                PrestamoId= prestamos.PrestamoId,
                EstudianteId= prestamos.EstudianteId,
                LibroId = Convert.ToInt32(libroSeleccionado),
                TituloLibro = contexto.Libros.Find(Convert.ToInt32(libroSeleccionado)).NombreLibro,
                FechaPrestamo = prestamos.FechaPrestamo,
                FechaDevolucion = prestamos.FechaDevolucion,


            });

        }
        else
        {
            toast.ShowError("Debe llenar los campos anteriores");
        }

    }
    public void EliminarDetalle(PrestamosDetalle prestamosDetalle)
    {
        prestamos.PrestamosDetalles.Remove(prestamosDetalle);
    }

    public void Guardar()
    {
        bool guardo;




        if (prestamos.PrestamosDetalles.Count>0)
        {
            guardo = PrestamosBLL.Guardar(prestamos);

            if (guardo)
            {
                Nuevo();
                toast.ShowSuccess("Guardado correctamente");
            }
            else
                toast.ShowError("No fue posible guardar");

        }
        else
        {
            toast.ShowError("No fue posible guardar, debe agregar un detalle");
        }


    }

    public void Eliminar()
    {
        bool elimino;

        elimino = PrestamosBLL.Eliminar(prestamos.PrestamoId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private List<Libro> CargarBoxlibros()
    {
        List<Libro> lista = new List<Libro>();
        try
        {

            lista = LibroBLL.GetList(P => true);

        }
        catch (Exception ex)
        {
            toast.ShowError(ex.ToString(), "Error");
        }
        return lista;
    }


    private void Cargarlibro()
    {
        if (PrestamosDetalle.LibroId > 0)
        {
            try
            {
                libro = LibroBLL.Buscar(Convert.ToInt32(libro.LibroId));
            }
            catch (Exception ex)
            {
                toast.ShowError(ex.ToString(), "Error");
            }
        }
    }
    private List<Estudiante> CargarBoxEstudetn()
    {
        List<Estudiante> lista = new List<Estudiante>();
        try
        {
            lista = EstudiantesBLL.GetList(P => true);

        }
        catch (Exception ex)
        {
            toast.ShowError(ex.ToString(), "Error");
        }
        return lista;
    }


    private void CargarEtudent()
    {
        if (prestamos.EstudianteId > 0)
        {
            try
            {
                estudiante = EstudiantesBLL.Buscar(Convert.ToInt32(estudianteSeleccionado));
            }
            catch (Exception ex)
            {
                toast.ShowError(ex.ToString(), "Error");
            }
        }
    }


}
