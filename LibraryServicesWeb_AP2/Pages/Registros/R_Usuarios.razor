@page "/Usuarios"
@page "/Usuarios/{Id:int}"
@using BLL
@using Models

@using Blazored.Toast.Services
@inject IToastService toast


<EditForm Model="usuarios" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card ">
        <div class="card-header bg-dark text-white">
            <h3>Registro de Usuario</h3>
        </div>

        <div class="card-body">
            <form>

                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>ID:</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="usuarios.UsuarioId" class="form-control col-4" />
                                <ValidationMessage For="@(() => usuarios.UsuarioId)"></ValidationMessage>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" @onclick="Buscar"> <i class="fa fa-search"></i>  Buscar </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Nombres*@
                <div class="form-group">
                    <label>Nombre:</label>
                    <InputText @bind-Value="usuarios.Nombres" class="form-control " />
                    <ValidationMessage For="@(() => usuarios.Nombres)" />
                </div>

                @*Celular*@
                <div class="form-group">
                    <label>Celular</label>
                    <input type="tel" @bind="usuarios.Celular" class="form-control" placeholder="000-000-0000" />
                    <ValidationMessage For="@(() => usuarios.Celular)" />
                </div>


                @*Email*@
                <div class="form-group">
                    <label>Email:</label>
                    <InputText @bind-Value="usuarios.Email" class="form-control " />
                    <ValidationMessage For="@(() => usuarios.Email)" />
                </div>

                @*Clave*@
                <div class="form-group">
                    <label>Clave</label>
                    <InputText type="password" class="form-control " @bind-Value="usuarios.Contraseña"></InputText>
                    <ValidationMessage For="@(() => usuarios.Contraseña)" />
                </div>


                @*Nivel*@
                <div class="form-group">
                    <label>Nivel</label>
                    <InputSelect @bind-Value="@usuarios.Nivel" class="form-control">
                        <option value="" disabled selected>Seleccione Su Nivel</option>
                        <option value="Administrador">Administrador</option>
                        <option value="Empleado">Usuario</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => usuarios.Nivel)" />
                </div>

                @*Fecha*@
                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="usuarios.FechaInsercion" class="form-control "></InputDate>
                    <ValidationMessage For="@(() => usuarios.FechaInsercion)"></ValidationMessage>
                </div>



            </form>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo </button>
                <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"></i> Guardar </button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"></i> Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>



@code {

    Usuarios usuarios = new Usuarios();

    [Parameter]
    public int Id { get; set; }

    public string direccion { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (Id > 0)
        {
            var Auxclientes = UsuariosBLL.Buscar(Id);
            if (Auxclientes != null)
                this.usuarios = Auxclientes;
            else
                toast.ShowWarning("No encontrado.");
        }
    }

    private void Nuevo()
    {
        this.usuarios = new Usuarios();
    }

    private void Guardar()
    {


        bool guardo;
        guardo = UsuariosBLL.Guardar(usuarios);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");


        

    }

    private void Buscar()
    {
        var encontrado = UsuariosBLL.Buscar(usuarios.UsuarioId);
        if (encontrado != null)
        {

            this.usuarios = encontrado;
        }
        else
        {
            toast.ShowWarning("No encontrado");
        }
    }

    private void Eliminar()
    {
        bool eliminar;

        eliminar = UsuariosBLL.Eliminar(usuarios.UsuarioId);

        if (eliminar)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado Correctamente");
        }
        else
        {
            toast.ShowError("No fue posible eliminar");
        }
    }
}
