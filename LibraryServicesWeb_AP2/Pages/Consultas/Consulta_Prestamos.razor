@page "/consultaPrestamos"
@using LibraryServicesWeb_AP2.BLL
@using LibraryServicesWeb_AP2.Models
@using LibraryServicesWeb_AP2.Pages.Reportes
@inject IToastService toast
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider



<EditForm Model="Listado">

    @if (AuthenticationStateProvider.GetAuthenticationStateAsync()
.Result.User.Identity.IsAuthenticated)
    {


        <div class="card bg-dark text-white">
            <div class="card-header">
                <h3><strong>Consulta Prestamos</strong></h3>
            </div>
            <div class="card-body">

                <div class="card-header">
                    <div class="row">
                        <div class="input-group col-12">
                            <div class="form-group col-3">
                                <label><strong>Filtro: </strong></label>
                                <select class="form-control " @bind="Filtro">
                                    <option value=0>Todo</option>
                                    <option value=1>Id</option>
                                    <option value=2>Estudiante</option>
                                    <option value=3>Fecha Prestamo</option>
                                    <option value=4>Fecha Devolucion</option>

                                </select>
                            </div>

                            <!-- Criterio -->
                            <div class="form-group col-4">
                                <label><strong>Criterio: </strong></label>
                                <div class="input-group">
                                    <InputText @bind-Value="@Criterio" class="form-control " placeholder="Criterio" />
                                    <button type="button" class="btn btn-primary" @onclick="Buscar">Consultar</button>
                                </div>
                            </div>



                            <!-- Filtrar por fecha -->
                            <div class="form-group col-12">
                                <input class="ml-1" type="checkbox" @bind-value="FiltrarFecha" style="margin-top:15px">&nbsp;&nbsp;Filtrar por Fecha
                            </div>


                            <!-- Fecha desde-->
                            <div class="form-group col-3">
                                <label><strong>Desde</strong> </label>
                                <div class="input-group">
                                    <InputDate @bind-Value="@Desde" class="form-control" />
                                </div>
                            </div>


                            <!-- Fecha Hasta-->
                            <div class="form-group col-3">
                                <label><strong>Hasta</strong> </label>
                                <div class="input-group">
                                    <InputDate @bind-Value="@Hasta" class="form-control" />
                                </div>
                            </div>



                            <div class="col-sm-0     col-md-0     col-lg-1     col-xl-2" />
                        </div>
                    </div>
                </div>
            </div>

            <table class="table" style="margin-top: 20px">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Id</th>
                        <th scope="col">Estudiante</th>
                        <th scope="col">Fecha de Prestamo</th>
                        <th scope="col">Fecha de Devolucion</th>

                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody class=text-white>
                    @if (ListadoPaginado.Count == 0)
                    {
                        <tr>
                            <th colspan="12" style="color:black; text-align: center">"No hay datos que mostrar"</th>
                        </tr>
                    }
                    else
                    {

                        @foreach (var item in ListadoPaginado)
                        {
                            <tr>
                                <td>@item.PrestamoId</td>
                                <td>@EstudiantesBLL.Buscar(item.EstudianteId).Matricula></td>
                                <td>@item.FechaPrestamo</td>
                                <td>@item.FechaDevolucion</td>

                                <td><a class="btn btn-dark" href="@($"Prestamos/{item.PrestamoId}")">Ver</a></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="bg-dark text-white">

            <div class="form-group col-2 col-md-2 ml-auto">
                <label><strong>Imprimir </strong></label>
                <button type="button" class="btn btn-danger btn-block" @onclick="GeneratePdf"><span class="oi oi-print"></span> Imprimir</button>
            </div>
        </div>
        <div class="form-row col-12 justify-content-center">
            <nav aria-label="Page navigation example">
                <ul class="pagination">
                    <li class="page-item">
                        <a class="page-link" @onclick="PaginaAnterior">
                            <span class="oi oi-media-skip"> Anterior</span>
                        </a>
                    </li>

                    @for (int i = 1; i <= Paginas; i++)
                    {
                        <li class="page-item disabled"><a class="page-link">@i</a></li>
                    }

                    <li class="page-item">
                        <a class="page-link" @onclick="PaginaSiguiente">
                            <span class="oi oi-media-skip"> Siguiente</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <h1>No esta registrado</h1>
        <a href="Usuarios" class="btn btn-primary">Ir al Registro</a>
    }
</EditForm>


@code {
    public PrestamosBLL prestamosBLL = new PrestamosBLL();
    private List<Prestamo> Listado { get; set; }
    private List<Prestamo> ListadoPaginado { get; set; }

    private string Criterio = string.Empty;
    private string Filtro = string.Empty;
    private bool FiltrarFecha = false;
    private DateTime Desde = DateTime.Now;
    private DateTime Hasta = DateTime.Now;


    double Paginas = 0;
    double Elementos = 0;
    int PaginaActual = 0;

    Paginacion paginacion = new Paginacion();

    protected override void OnInitialized()
    {
        Listado = PrestamosBLL.GetList(e => true);
        Filtro = "0";
        Desde = DateTime.Now;
        Hasta = DateTime.Now;

        IniciarPaginacion();
    }

    public void IniciarPaginacion()
    {
        PaginaActual = 1;
        Elementos = Listado.Count();
        Paginas = Math.Ceiling(Elementos / paginacion.Mostrar);
        ListadoPaginado = Listado.Take(paginacion.Mostrar).ToList();
    }

    private void PaginaSiguiente()
    {
        if (PaginaActual < Paginas)
        {
            PaginaActual++;
            ListadoPaginado = Listado
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }

    private void PaginaAnterior()
    {
        if (PaginaActual > 1)
        {
            PaginaActual--;
            ListadoPaginado = Listado
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }

    public void FiltrarPorLaFecha()
    {
        if (FiltrarFecha == true && Listado.Count > 0)
        {
            Listado = Listado.Where(p => p.FechaPrestamo.Date >= Desde.Date && p.FechaPrestamo.Date <= Hasta.Date).ToList();
            FiltrarFecha = false;
        }
        IniciarPaginacion();
    }

    public async void GeneratePdf()
    {
        ReprotePrestamos reporteLibros = new ReprotePrestamos();
        await js.InvokeVoidAsync(
            "saveAsFile",
            "PrestamoList.pdf",
            Convert.ToBase64String(reporteLibros.Report(Listado))
            );


    }

    private void Buscar()
    {
        if (Filtro == "0")
        {
            Listado = PrestamosBLL.GetList(e => true);
            FiltrarPorLaFecha();
        }
        else
        {
            if (Criterio == "")
            {
                toast.ShowError("Agregue un Cirterio de Busqueda");
            }
            else
            {
                Listado = PrestamosBLL.GetList(e => true);
                switch (Filtro)
                {
                    case "1":
                        Listado = Listado.Where(e => e.PrestamoId.ToString().Contains(Criterio.ToString())).ToList();
                        break;
                    case "2":
                        Listado = Listado.Where(e => e.EstudianteId.ToString().Contains(Criterio.ToString())).ToList();
                        break;
                    case "3":
                        Listado = Listado.Where(e => e.FechaPrestamo.ToString().Contains(Criterio.ToString())).ToList();
                        break;
                    case "4":
                        Listado = Listado.Where(e => e.FechaDevolucion.ToString().Contains(Criterio.ToString())).ToList();
                        break;
                }
                FiltrarPorLaFecha();
            }

        }
    }
}