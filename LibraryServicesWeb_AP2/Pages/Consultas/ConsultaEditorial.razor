@page "/consultaeditorial"

@using Models
@using BLL
@using LibraryServicesWeb_AP2.Pages.Reportes
@inject IJSRuntime js
@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

    <EditForm Model="Listado">
        @if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
        {
            <a href="ContConsulta" class="btn btn-warning justify-content-lg-start">Menu de Consultas</a>
            <div class="card bg-dark text-white">
                <div class="card-header">
                    <h3><strong>Consulta Editorial</strong></h3>
                </div>
                <div class="card-body">

                    <div class="card-header">
                        <div class="row">
                            <div class="input-group col-12">
                                <div class="form-group col-3">
                                    <label><strong>Filtro: </strong></label>
                                    <select class="form-control " @bind="Filtro">
                                        <option value=0>Todo</option>
                                        <option value=1>Id</option>
                                        <option value=2>Nombre</option>
                                        <option value=2>Direccion</option>


                                    </select>
                                </div>

                                <!-- Criterio -->
                                <div class="form-group col-4">
                                    <label><strong>Criterio: </strong></label>
                                    <div class="input-group">
                                        <InputText @bind-Value="@Criterio" class="form-control " placeholder="Criterio" />

                                        <button type="button" class="btn btn-primary" @onclick="Buscar">Consultar</button>
                                    </div>
                                </div>



                                <div class="col-sm-0     col-md-0     col-lg-1     col-xl-2" />
                            </div>
                        </div>
                    </div>
                </div>

                <table class="table" style="margin-top: 20px">
                    <thead class="thead-light">
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Nombre</th>
                            <th scope="col">Direccion</th>


                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody class=text-white>
                        @if (ListadoPaginado.Count == 0)
                        {
                            <tr>
                                <th colspan="12" style="color:black; text-align: center">"No hay datos que mostrar"</th>
                            </tr>
                        }
                        else
                        {

                            @foreach (var item in ListadoPaginado)
                            {
                                <tr>
                                    <td>@item.EditorialId</td>
                                    <td>@item.Nombre</td>
                                    <td>
                                        @item.Dirrecion
                                    </td>


                                    <td><a class="btn btn-dark" href="@($"REditorial/{item.EditorialId}")">Ver</a></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="bg-dark text-white">

                <div class="form-group col-2 col-md-2 ml-auto">
                    <button type="button" class="btn btn-warning btn-block" @onclick="GeneratePdf"><span class="oi oi-print"></span> Imprimir</button>
                </div>
            </div>
            <div class="form-row col-12 justify-content-center">
                <nav aria-label="Page navigation example">
                    <ul class="pagination">
                        <li class="page-item">
                            <a class="page-link" @onclick="PaginaAnterior">
                                <span class="oi oi-media-skip"> Anterior</span>
                            </a>
                        </li>

                        @for (int i = 1; i <= Paginas; i++)
                        {
                            <li class="page-item disabled"><a class="page-link">@i</a></li>
                        }

                        <li class="page-item">
                            <a class="page-link" @onclick="PaginaSiguiente">
                                <span class="oi oi-media-skip"> Siguiente</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        }
        else
        {
            <h1>No esta registrado</h1>
            <a href="Usuarios" class="btn btn-primary">Ir al Registro</a>
        }
    </EditForm>
       
 @code {
     public EditorialBLL editorialBLL = new EditorialBLL();
     private List<Editorial> Listado { get; set; } = new List<Editorial>();
     private List<Editorial> ListadoPaginado { get; set; }

     private string Criterio = string.Empty;
     private string Filtro = string.Empty;


     double Paginas = 0;
     double Elementos = 0;
     int PaginaActual = 0;

     Paginacion paginacion = new Paginacion();

     protected override void OnInitialized()
     {
         Listado = EditorialBLL.GetList(e => true);
         Filtro = "0";

         IniciarPaginacion();
     }

     public void IniciarPaginacion()
     {
         PaginaActual = 1;
         Elementos = Listado.Count();
         Paginas = Math.Ceiling(Elementos / paginacion.Mostrar);
         ListadoPaginado = Listado.Take(paginacion.Mostrar).ToList();
     }

     private void PaginaSiguiente()
     {
         if (PaginaActual < Paginas)
         {
             PaginaActual++;
             ListadoPaginado = Listado
                 .Skip((PaginaActual - 1) * paginacion.Mostrar)
                 .Take(paginacion.Mostrar)
                 .ToList();
         }
     }

     private void PaginaAnterior()
     {
         if (PaginaActual > 1)
         {
             PaginaActual--;
             ListadoPaginado = Listado
                 .Skip((PaginaActual - 1) * paginacion.Mostrar)
                 .Take(paginacion.Mostrar)
                 .ToList();
         }
     }


     public async void GeneratePdf()
     {

         if (Listado.Count > 0)
         {
             Reporte_Editorial reporte = new Reporte_Editorial();
             await js.InvokeVoidAsync(
                 "saveAsFile",
                 "CategoriaList.pdf",
                 Convert.ToBase64String(reporte.Report(Listado))
                 );
         }
         else
         {
             toast.ShowWarning("No hay datos para imprimir");
         }


     }



     private void Buscar()
     {
         if (Filtro == "0")
         {
             Listado = EditorialBLL.GetList(e => true);
         }
         else
         {
             if (Criterio == "")
             {
                 toast.ShowError("Agregue el criterio de busqueda.");
             }
             else
             {
                 Listado = EditorialBLL.GetList(e => true);
                 switch (Filtro)
                 {
                     case "1":
                         Listado = Listado.Where(e => e.EditorialId.ToString().Contains(Criterio.ToString())).ToList();
                         break;
                     case "2":
                         Listado = Listado.Where(e => e.Nombre.ToString().Contains(Criterio.ToString())).ToList();
                         break;
                     case "3":
                         Listado = Listado.Where(e => e.Dirrecion.ToString().Contains(Criterio.ToString())).ToList();
                         break;

                 }

             }

         }

     }

}
