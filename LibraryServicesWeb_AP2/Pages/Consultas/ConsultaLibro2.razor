@page "/ConsultaLib"

@using Models
@using BLL
@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <div class="card bg-dark text-white">
        <div class="card-header">
            <h3><strong>Consulta Libros</strong></h3>
        </div>
        <div class="card-body">

            <div class="card-header">
                <div class="row">
                    <div class="input-group col-12">
                        <div class="form-group col-3">
                            <label><strong>Filtro: </strong></label>
                            <select class="form-control " @bind="Filtro">
                                <option value=0>Todo</option>
                                <option value=1>Id</option>
                                <option value=2>Titulo</option>
                                <option value=3>ISBN</option>
                                <option value=4>CategoriaId</option>
                                <option value=5>EditorialId</option>
                                <option value=6>Fecha de Impresion</option>

                            </select>
                        </div>
                        <div class="form-group col-4">
                            <label><strong>Criterio: </strong></label>
                            <div class="input-group">
                                <input type="text" class="form-control" @bind="Criterio" placeholder="Criterio" />
                                <button type="button" class="btn btn-primary input-group-append" @onclick="@(c => Consultar(0))">Consultar</button>
                            </div>
                        </div>
                        <div class="form-group col-2">
                            <label><strong>Desde: </strong></label>
                            <input type="date" class="form-control" @bind="Desde" />
                        </div>
                        <div class="form-group col-2">
                            <label><strong>Hasta: </strong></label>
                            <input type="date" class="form-control" @bind="Hasta" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <table class="table">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Titulo</th>
                    <th scope="col">ISBN</th>
                    <th scope="col">CateoriaId</th>
                    <th scope="col">EditorialId</th>
                    <th scope="col">Fecha Impresion</th>
                    <th scope="col">Disponibilidad</th>

                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody class=text-white>
                @foreach (var item in Lista)
                {
               
                 }

                </tbody>
            </table>
        </div>
        <div class="bg-dark text-white">
            <div class="row">
                <div class="form-group col-2 col-md-2 ml-auto">
                    <label><strong>Imprimir </strong></label>
                    <button type="button" class="btn btn-primary btn-block"><span class="oi oi-print"></span> Consulta</button>
                </div>
            </div>
        </div>
        <div class="card-footer" style="background-color: #dc3545">
            <div class="form-group text-center" display: inline-block>
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        <li class="page-item">
                            <button class="page-link btn btn-danger"
                                    @onclick="@(e => NavegateTo("Previous"))" tabindex="-1">
                                Previous
                            </button>
                        </li>

                        @for (int i = 0; i < Paginas; i++)
                        {
                            var pageNumber = i;
        <li class="page-item">
            <button class="@(CurrentPage == pageNumber ? "page-link btn btn-dark" : "page-link btn btn-danger")"
                    @onclick="@(u => Consultar(pageNumber))">
                @(i + 1)
            </button>
        </li>}

                        <li class="page-item">
                            <button type="button" class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Next"))" tabindex="-1">Next</button>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>



       

    }
    else
    {
        <h1>No esta registrado</h1>
        <a href="Usuarios" class="btn btn-primary">Ir al Registro</a>
    }

@code {
    public DateTime Desde { get; set; } = DateTime.Today;
    public DateTime Hasta { get; set; } = DateTime.Today;
    public List<Libro> Lista { get; set; } = new List<Libro>();
    public List<Libro> Items { get; set; } = new List<Libro>();
    public int TamañoPagina { get; set; }

    public string Criterio { get; set; } = string.Empty;

    public int Filtro { get; set; }
    public int Numeracion { get; set; }
    public int Paginas { get; set; }
    public int CurrentPage { get; set; }




    protected override void OnInitialized()
    {

        TamañoPagina = 4;
        base.OnInitialized();
    }
    Paginacion paginacion = new Paginacion();




    public void Consultar(int nulo)
    {
        if (Criterio != string.Empty)
        {
            switch (Filtro)
            {
                case 0:
                    Items =LibroBLL.GetList(p => true);
                    Paginas = (int)Math.Ceiling(Items.Count() / (decimal)TamañoPagina);
                    UpdateList(nulo);
                    break;
                case 1:
                    int id = Convert.ToInt32(Criterio);
                    Items = LibroBLL.GetList(a => a.LibroId == id);
                    Paginas = (int)Math.Ceiling(Items.Count() / (decimal)TamañoPagina);
                    UpdateList(nulo);
                    break;
                case 2:
                    Items = LibroBLL.GetList(a => a.NombreLibro.Contains(Criterio));
                    Paginas = (int)Math.Ceiling(Items.Count() / (decimal)TamañoPagina);
                    UpdateList(nulo);
                    break;
                case 3:
                    Items = LibroBLL.GetList(a => a.ISBN.Contains(Criterio));
                    Paginas = (int)Math.Ceiling(Items.Count() / (decimal)TamañoPagina);
                    UpdateList(nulo);
                    break;
                case 4:
                    int idc = Convert.ToInt32(Criterio);
                    Items = LibroBLL.GetList(a => a.CategoriaId == idc);
                    Paginas = (int)Math.Ceiling(Items.Count() / (decimal)TamañoPagina);
                    UpdateList(nulo);
                    break;
                case 5:
                    int ide = Convert.ToInt32(Criterio);
                    Items = LibroBLL.GetList(a => a.EditorialId == ide);
                    Paginas = (int)Math.Ceiling(Items.Count() / (decimal)TamañoPagina);
                    UpdateList(nulo);
                    break;




            }
        }
        else
        {
            Items = LibroBLL.GetList(a => true);
            Paginas = (int)Math.Ceiling(Items.Count() / (decimal)TamañoPagina);
            UpdateList(nulo);
        }
    }

    private void UpdateList(int pageNumber)
    {
        Lista = Items.Skip(pageNumber * TamañoPagina).Take(TamañoPagina).ToList();
        CurrentPage = pageNumber;
    }

    private void NavegateTo(string direction)
    {
        if (direction == "Previous" && CurrentPage != 0)
            CurrentPage -= 1;
        if (direction == "Next" && CurrentPage != Paginas)
            CurrentPage += 1;

        UpdateList(CurrentPage);
    }
   





}
